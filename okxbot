#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ============ 标准库导入 ============
import os
import sys
import time
import json
import hashlib
import hmac
import base64
import socket
import threading
from datetime import datetime
from urllib.parse import urljoin

# ============ 第三方库导入 ============
import requests
from dotenv import load_dotenv

# ============ 初始化环境 ============
try:
    load_dotenv()
except Exception as e:
    print(f"加载.env文件失败: {e}")
    sys.exit(1)

# ============ 网络连接修复 ============
def fix_dns_resolution():
    """解决Ubuntu下可能的DNS污染问题"""
    original_getaddrinfo = socket.getaddrinfo
    def new_getaddrinfo(host, *args, **kwargs):
        if host == 'www.okx.cab':
            return [(socket.AF_INET, socket.SOCK_STREAM, 6, '', ('104.16.148.43', 443))]
        return original_getaddrinfo(host, *args, **kwargs)
    socket.getaddrinfo = new_getaddrinfo

fix_dns_resolution()

# ============ 配置类 ============
class Config:
    # 环境变量加载（自动去除引号）
    API_KEY = os.getenv("OKX_API_KEY", "").strip('"\'')
    SECRET_KEY = os.getenv("OKX_SECRET_KEY", "").strip('"\'')
    PASSPHRASE = os.getenv("OKX_PASSPHRASE", "").strip('"\'')
    SANDBOX = os.getenv("SANDBOX_MODE", "true").lower() == "true"
    
    # 网络配置
    BASE_URL = "https://www.okx.cab" if SANDBOX else "https://www.okx.com"
    API_PREFIX = "/api/v5"
    TIMEOUT = 10  # 请求超时(秒)
    
    # 交易参数
    SPOT_SYMBOL = "GMT-USDT"
    SWAP_SYMBOL = "BTC-USDT-SWAP"
    LEVERAGE = 20
    MAX_DRAWDOWN = 0.05  # 5%最大回撤

# ============ API客户端 ============
class OKXClient:
    @staticmethod
    def _sign(timestamp, method, path, body=""):
        """生成API签名"""
        message = timestamp + method.upper() + path + str(body)
        return base64.b64encode(
            hmac.new(
                Config.SECRET_KEY.encode(),
                message.encode(),
                hashlib.sha256
            ).digest()
        ).decode()

    @staticmethod
    def request(method, endpoint, body=None, retry=3):
        """带重试的请求发送"""
        path = f"{Config.API_PREFIX}{endpoint}"
        url = urljoin(Config.BASE_URL, path)
        
        for attempt in range(retry):
            try:
                timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
                signature = OKXClient._sign(timestamp, method, path, body)
                
                headers = {
                    "OK-ACCESS-KEY": Config.API_KEY,
                    "OK-ACCESS-SIGN": signature,
                    "OK-ACCESS-TIMESTAMP": timestamp,
                    "OK-ACCESS-PASSPHRASE": Config.PASSPHRASE,
                    "Content-Type": "application/json"
                }
                
                resp = requests.request(
                    method=method,
                    url=url,
                    headers=headers,
                    json=body,
                    timeout=Config.TIMEOUT
                )
                resp.raise_for_status()
                return resp.json()
                
            except requests.exceptions.RequestException as e:
                if attempt == retry - 1:
                    raise Exception(f"API请求失败({method} {endpoint}): {str(e)}")
                time.sleep(2 ** attempt)  # 指数退避

# ============ 交易引擎 ============
class TradingEngine:
    def __init__(self):
        self.running = True
        self._check_auth()

    def _check_auth(self):
        """验证API连接"""
        try:
            print("验证API连接...")
            balance = OKXClient.request("GET", "/account/balance")
            print(f"验证成功! 账户余额: {balance['data'][0]['details'][0]['eq']} USDT")
        except Exception as e:
            print(f"验证失败: {str(e)}")
            sys.exit(1)

    def spot_grid(self):
        """现货网格策略"""
        print(f"\n▶ 启动现货网格交易 [{Config.SPOT_SYMBOL}]")
        while self.running:
            try:
                # 获取行情
                ticker = OKXClient.request("GET", f"/market/ticker?instId={Config.SPOT_SYMBOL}")
                last = float(ticker["data"][0]["last"])
                
                # 计算网格 (1%间距)
                grid_size = round(last * 0.01, 4)
                buy_price = round(last - grid_size, 4)
                sell_price = round(last + grid_size, 4)
                
                # 撤单 -> 挂单
                OKXClient.request("POST", "/trade/cancel-all-orders", {"instId": Config.SPOT_SYMBOL})
                OKXClient.request("POST", "/trade/order", {
                    "instId": Config.SPOT_SYMBOL,
                    "tdMode": "cash",
                    "side": "buy",
                    "ordType": "limit",
                    "px": str(buy_price),
                    "sz": "100"  # 委托数量
                })
                OKXClient.request("POST", "/trade/order", {
                    "instId": Config.SPOT_SYMBOL,
                    "tdMode": "cash",
                    "side": "sell",
                    "ordType": "limit",
                    "px": str(sell_price),
                    "sz": "100"
                })
                
                print(f"网格更新 | 当前价: {last} | 买单: {buy_price} | 卖单: {sell_price}")
                time.sleep(60)
                
            except Exception as e:
                print(f"网格异常: {str(e)}")
                time.sleep(30)

    def futures_trend(self):
        """合约趋势策略"""
        print(f"\n▶ 启动合约策略 [{Config.SWAP_SYMBOL}]")
        while self.running:
            try:
                # 获取K线
                klines = OKXClient.request("GET", 
                    f"/market/candles?instId={Config.SWAP_SYMBOL}&bar=15m&limit=50"
                )
                closes = [float(c[4]) for c in klines["data"]]
                
                # 计算指标
                ma5 = sum(closes[-5:]) / 5
                ma20 = sum(closes[-20:]) / 20
                current = closes[-1]
                
                # 交易信号
                if current > ma5 > ma20:  # 多头趋势
                    OKXClient.request("POST", "/trade/order", {
                        "instId": Config.SWAP_SYMBOL,
                        "tdMode": "cross",
                        "side": "buy",
                        "ordType": "market",
                        "sz": "0.01",  # 合约面值
                        "lever": str(Config.LEVERAGE),
                        "slOrdPx": "-2",  # 2%止损
                        "tpOrdPx": "5"     # 5%止盈
                    })
                    print(f"做多信号 | 价格: {current} | 5MA: {ma5:.2f} | 20MA: {ma20:.2f}")
                elif current < ma5 < ma20:  # 空头趋势
                    OKXClient.request("POST", "/trade/order", {
                        "instId": Config.SWAP_SYMBOL,
                        "tdMode": "cross",
                        "side": "sell",
                        "ordType": "market",
                        "sz": "0.01",
                        "lever": str(Config.LEVERAGE),
                        "slOrdPx": "-2",
                        "tpOrdPx": "5"
                    })
                    print(f"做空信号 | 价格: {current} | 5MA: {ma5:.2f} | 20MA: {ma20:.2f}")
                
                time.sleep(300)  # 5分钟检查一次
                
            except Exception as e:
                print(f"合约异常: {str(e)}")
                time.sleep(60)

# ============ 主程序 ============
def main():
    print("""
    ██████╗ ██╗  ██╗██╗  ██╗██████╗ ███████╗
    ██╔══██╗██║ ██╔╝╚██╗██╔╝██╔══██╗██╔════╝
    ██████╔╝█████╔╝  ╚███╔╝ ██████╔╝███████╗
    ██╔══██╗██╔═██╗  ██╔██╗ ██╔══██╗╚════██║
    ██████╔╝██║  ██╗██╔╝ ██╗██████╔╝███████║
    ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝
    OKX量化交易系统 v4.0 (Ubuntu优化版)
    """)

    engine = TradingEngine()
    
    while True:
        print("\n1. 现货网格交易\n2. 合约趋势策略\n3. 全自动模式\n4. 退出")
        choice = input("请选择模式: ").strip()
        
        if choice == "1":
            engine.spot_grid()
        elif choice == "2":
            engine.futures_trend()
        elif choice == "3":
            t1 = threading.Thread(target=engine.spot_grid, daemon=True)
            t2 = threading.Thread(target=engine.futures_trend, daemon=True)
            t1.start()
            t2.start()
            try:
                while True: time.sleep(1)
            except KeyboardInterrupt:
                engine.running = False
                print("\n安全停止中...")
                break
        elif choice == "4":
            break
        else:
            print("无效输入")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n用户终止")
    except Exception as e:
        print(f"\n致命错误: {str(e)}")
        sys.exit(1)
